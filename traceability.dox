/**
 * @page traceability Traceability
 *
 * This page describes the existing unit tests, their unique identifiers, and the requirements they validate.
 *
 * | Test ID  | Test Name           | Validated Requirements         | Tested Function         | Expected Outcome        |
 * |-----------|--------------------------|-------------------------------|-------------------------|-----------------------------|
 * | \anchor TC_AEB_A__001 **TC_AEB_A__001** | [test_actuatorsTranslateCanMsg_AEB_S_Identifier()](@ref test_actuatorsTranslateCanMsg_AEB_S_Identifier) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | belt_tightness = true, door_lock = false, should_activate_abs = true, alarm_led = true, alarm_buzzer = true |
 * | \anchor TC_AEB_A__002 **TC_AEB_A__002** | [test_actuatorsTranslateCanMsg_Empty_Identifier()](@ref test_actuatorsTranslateCanMsg_Empty_Identifier) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | All actuators state fields remain false |
 * | \anchor TC_AEB_A__003 **TC_AEB_A__003** | [test_updateInternalActuatorsState_Correct_State()](@ref test_updateInternalActuatorsState_Correct_State) | [SwR-4](@ref SwR-4) | [updateInternalActuatorsState()](@ref updateInternalActuatorsState) | belt_tightness = true, door_lock = false, should_activate_abs = true, alarm_led = true, alarm_buzzer = true |
 * | \anchor TC_AEB_A__004 **TC_AEB_A__004** | [test_actuatorsTranslateCanMsg()](@ref test_actuatorsTranslateCanMsg) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | Same expected output as TC_AEB_A__001	 |
 * | \anchor TC_AEB_A__005 **TC_AEB_A__005** | [test_actuatorsTranslateCanMsg_Unknown_Identifier()](@ref test_actuatorsTranslateCanMsg_Unknown_Identifier) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | All actuators state fields remain false		 |
 * | \anchor TC_AEB_A__006 **TC_AEB_A__006** | [test_updateInternalActuatorsState_DataFrame0_Active()](@ref test_updateInternalActuatorsState_DataFrame0_Active) | [SwR-4](@ref SwR-4) | [updateInternalActuatorsState()](@ref updateInternalActuatorsState) | belt_tightness = false, door_lock = true, should_activate_abs = false, alarm_led = true, alarm_buzzer = true		 |
 * | \anchor TC_AEB_A__007 **TC_AEB_A__007** | [test_InitialActuatorsState()](@ref test_InitialActuatorsState) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | All actuators state fields remain false		 |
 * | \anchor TC_AEB_A__008 **TC_AEB_A__008** | [test_actuatorsTranslateCanMsg_Unexpected_DataFrame()](@ref test_actuatorsTranslateCanMsg_Unexpected_DataFrame) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | belt_tightness = false, door_lock = true, should_activate_abs = false, alarm_led = false, alarm_buzzer = false		 |
 * | \anchor TC_AEB_A__009 **TC_AEB_A__009** | [test_actuatorsResponseLoop_EmptyQueue()](@ref test_actuatorsResponseLoop_EmptyQueue) | [SwR-4](@ref SwR-4) | [actuatorsResponseLoop()](@ref actuatorsResponseLoop) | After max iterations with empty queue, it should stop or behave as expected		 |
 * | \anchor TC_AEB_A__010 **TC_AEB_A__010** | [test_actuatorsResponseLoop_UnknownMessages()](@ref test_actuatorsResponseLoop_UnknownMessages) | [SwR-4](@ref SwR-4) | [actuatorsResponseLoop()](@ref actuatorsResponseLoop) | The state must be updated or not depending on internal logic. In this case: belt_tightness = true, door_lock = false, should_activate_abs = true, etc.		 |
 * | \anchor TC_LOG_UTILS_001 **TC_LOG_UTILS_001** | [test_log_event_fopen_fail()](@ref test_log_event_fopen_fail) | [SwR-4](@ref SwR-4) | [log_event()](@ref log_event) | Verifies if the fopen fail is catchable by the test, as a means to increase coverage.		 |
 * | \anchor TC_LOG_UTILS_002 **TC_LOG_UTILS_002** | [test_log_event_check_writing_no1()](@ref test_log_event_check_writing_no1) | [SwR-4](@ref SwR-4) | [log_event()](@ref log_event) | Writes a line in the log file and checks that the writing is in accordance with the data type.		 |
 * | \anchor TC_TTC_CTRL_001 **TC_TTC_CTRL_001** | [test_ttc_when_acel_zero()](@ref test_ttc_when_acel_zero) | [SwR-1](@ref SwR-1), [SwR-6](@ref SwR-6) | [ttc_calc()](@ref ttc_calc) | Values according to the calculation when acceleration is zero, within 0.0001 difference. 		 |
 * | \anchor TC_TTC_CTRL_002 **TC_TTC_CTRL_002** | [test_ttc_when_delta_negative()](@ref test_ttc_when_delta_negative) | [SwR-1](@ref SwR-1), [SwR-6](@ref SwR-6) | [ttc_calc()](@ref ttc_calc) | Values according to the calculation when delta is negative, within 0.0001 difference.		 |
 * | \anchor TC_TTC_CTRL_003 **TC_TTC_CTRL_003** | [test_ttc_when_delta_zero()](@ref test_ttc_when_delta_zero) | [SwR-1](@ref SwR-1), [SwR-6](@ref SwR-6) | [ttc_calc()](@ref ttc_calc) | Values according to the calculation when delta is zero, within 0.0001 difference.		 |
 * | \anchor TC_TTC_CTRL_004 **TC_TTC_CTRL_004** | [test_ttc_when_delta_positive()](@ref test_ttc_when_delta_positive) | [SwR-1](@ref SwR-1), [SwR-6](@ref SwR-6) | [ttc_calc()](@ref ttc_calc) | Values according to the calculation when delta is positive, within 0.0001 difference.		 |
 * | \anchor TC_TTC_CTRL_005 **TC_TTC_CTRL_005** | [test_aebcontrol_no_actuators_trigger()](@ref test_aebcontrol_no_actuators_trigger) | [SwR-1](@ref SwR-1), [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6) | [aeb_control()](@ref aeb_control) | All actuator abstractions must be in the deactivated state, except 'door_lock'.		 |
 * | \anchor TC_TTC_CTRL_006 **TC_TTC_CTRL_006** | [test_aeb_worst_situation()](@ref test_aeb_worst_situation) | [SwR-1](@ref SwR-1), [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6) | [aeb_control()](@ref aeb_control) | All actuator abstractions must be in the activated state, except 'door_lock'.		 |
 * | \anchor TC_TTC_CTRL_007 **TC_TTC_CTRL_007** | [test_aeb_generic_break_situations()](@ref test_aeb_generic_break_situations) | [SwR-1](@ref SwR-1), [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6) | [aeb_control()](@ref aeb_control) | Alarm and ABS abstractions must be in the activated state, regardless of the others actuators.		 |
 * | \anchor TC_TTC_CTRL_008 **TC_TTC_CTRL_008** | [test_aeb_alarm_situation()](@ref test_aeb_alarm_situation) | [SwR-1](@ref SwR-1), [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6) | [aeb_control()](@ref aeb_control) | Alarm abstraction must be in the activated state, while ABS must remain deactivated.		 |
 * | \anchor TC_AEB_CTRL_001 **TC_AEB_CTRL_001** | [test_TC_AEB_CTRL_001()](@ref test_TC_AEB_CTRL_001) | [SwR-6](@ref SwR-6), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [updateInternalPedalsState()](@ref updateInternalPedalsState) | Accelerator pedal = ON, Brake pedal = OFF |
 * | \anchor TC_AEB_CTRL_002 **TC_AEB_CTRL_002** | [test_TC_AEB_CTRL_002()](@ref test_TC_AEB_CTRL_002) | [SwR-6](@ref SwR-6), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [updateInternalPedalsState()](@ref updateInternalPedalsState) | Accelerator pedal = ON, Brake pedal = ON |
 * | \anchor TC_AEB_CTRL_003 **TC_AEB_CTRL_003** | [test_TC_AEB_CTRL_003()](@ref test_TC_AEB_CTRL_003) | [SwR-6](@ref SwR-6), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [updateInternalPedalsState()](@ref updateInternalPedalsState) | Accelerator pedal = OFF, Brake pedal = OFF |
 * | \anchor TC_AEB_CTRL_004 **TC_AEB_CTRL_004** | [test_TC_AEB_CTRL_004()](@ref test_TC_AEB_CTRL_004) | [SwR-6](@ref SwR-6), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [updateInternalPedalsState()](@ref updateInternalPedalsState) | Accelerator pedal = OFF, Brake pedal = ON |
 * | \anchor TC_AEB_CTRL_005 **TC_AEB_CTRL_005** | [test_TC_AEB_CTRL_005()](@ref test_TC_AEB_CTRL_005) | [SwR-6](@ref SwR-6), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Speed = 100.0 km/h, Reverse flag = false |
 * | \anchor TC_AEB_CTRL_006 **TC_AEB_CTRL_006** | [test_TC_AEB_CTRL_006()](@ref test_TC_AEB_CTRL_006) | [SwR-6](@ref SwR-6), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Speed = 0.0 km/h, Reverse flag = false |
 * | \anchor TC_AEB_CTRL_007 **TC_AEB_CTRL_007** | [test_TC_AEB_CTRL_007()](@ref test_TC_AEB_CTRL_007) | [SwR-6](@ref SwR-6), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Speed = 20.0 km/h, Reverse flag = true |
 * | \anchor TC_AEB_CTRL_008 **TC_AEB_CTRL_008** | [test_TC_AEB_CTRL_008()](@ref test_TC_AEB_CTRL_008) | [SwR-6](@ref SwR-6), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Speed = 251.0 km/h (capped) |
 * | \anchor TC_AEB_CTRL_009 **TC_AEB_CTRL_009** | [test_TC_AEB_CTRL_009()](@ref test_TC_AEB_CTRL_009) | [SwR-6](@ref SwR-6), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Speed = 0.0 km/h, Reverse flag = false |
 * | \anchor TC_AEB_CTRL_X01 **TC_AEB_CTRL_X01** | [test_TC_AEB_CTRL_X01()](@ref test_TC_AEB_CTRL_X01) | [SwR-6](@ref SwR-6), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Speed = 100.0 km/h, Reverse flag = false |
 * | \anchor TC_AEB_CTRL_010 **TC_AEB_CTRL_010** | [test_TC_AEB_CTRL_010()](@ref test_TC_AEB_CTRL_010) | [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-15](@ref SwR-15) | [updateInternalObstacleState()](@ref updateInternalObstacleState) | Obstacle detected = true, Distance = 100.0 meters |
 * | \anchor TC_AEB_CTRL_011 **TC_AEB_CTRL_011** | [test_TC_AEB_CTRL_011()](@ref test_TC_AEB_CTRL_011) | [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-15](@ref SwR-15) | [updateInternalObstacleState()](@ref updateInternalObstacleState) | No obstacle detected, Distance = 300.0 meters |
 * | \anchor TC_AEB_CTRL_012 **TC_AEB_CTRL_012** | [test_TC_AEB_CTRL_012()](@ref test_TC_AEB_CTRL_012) | [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-15](@ref SwR-15) | [updateInternalObstacleState()](@ref updateInternalObstacleState) | Obstacle not detected, Distance = 300.0 meters |
 * | \anchor TC_AEB_CTRL_X02 **TC_AEB_CTRL_X02** | [test_TC_AEB_CTRL_X02()](@ref test_TC_AEB_CTRL_X02) | [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-15](@ref SwR-15) | [updateInternalObstacleState()](@ref updateInternalObstacleState) | No obstacle detected, Distance = 300.0 meters |
 * | \anchor TC_AEB_CTRL_X03 **TC_AEB_CTRL_X03** | [test_TC_AEB_CTRL_X03()](@ref test_TC_AEB_CTRL_X03) | [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-15](@ref SwR-15) | [updateInternalObstacleState()](@ref updateInternalObstacleState) | Obstacle detected, Distance = 100.0 meters |
 * | \anchor TC_AEB_CTRL_013 **TC_AEB_CTRL_013** | [test_TC_AEB_CTRL_013()](@ref test_TC_AEB_CTRL_013) | [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-15](@ref SwR-15) | [updateInternalObstacleState()](@ref updateInternalObstacleState) | Obstacle not detected, Distance = 300.0 meters |
 * | \anchor TC_AEB_CTRL_014 **TC_AEB_CTRL_014** | [test_TC_AEB_CTRL_014()](@ref test_TC_AEB_CTRL_014) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-16](@ref SwR-16) | [updateInternalCarCState()](@ref updateInternalCarCState) | AEB system ON, Flag = true |
 * | \anchor TC_AEB_CTRL_015 **TC_AEB_CTRL_015** | [test_TC_AEB_CTRL_015()](@ref test_TC_AEB_CTRL_015) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-16](@ref SwR-16) | [updateInternalCarCState()](@ref updateInternalCarCState) | AEB system OFF, Flag = false |
 * | \anchor TC_AEB_CTRL_X04 **TC_AEB_CTRL_X04** | [test_TC_AEB_CTRL_X04()](@ref test_TC_AEB_CTRL_X04) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-16](@ref SwR-16) | [updateInternalCarCState()](@ref updateInternalCarCState) | AEB system OFF for any value other than 0x01 |
 * | \anchor TC_AEB_CTRL_X05 **TC_AEB_CTRL_X05** | [test_TC_AEB_CTRL_X05()](@ref test_TC_AEB_CTRL_X05) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-16](@ref SwR-16) | [updateInternalCarCState()](@ref updateInternalCarCState) | AEB system back ON, Flag = true |
 * | \anchor TC_AEB_CTRL_X06 **TC_AEB_CTRL_X06** | [test_TC_AEB_CTRL_X06()](@ref test_TC_AEB_CTRL_X06) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-15](@ref SwR-15), [SwR-16](@ref SwR-16) | [getAEBState()](@ref getAEBState) | AEB system in ALARM state |
 * | \anchor TC_AEB_CTRL_X07 **TC_AEB_CTRL_X07** | [test_TC_AEB_CTRL_X07()](@ref test_TC_AEB_CTRL_X07) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-15](@ref SwR-15), [SwR-16](@ref SwR-16) | [getAEBState()](@ref getAEBState) | AEB system in BRAKE state |
 * | \anchor TC_AEB_CTRL_X08 **TC_AEB_CTRL_X08** | [test_TC_AEB_CTRL_X08()](@ref test_TC_AEB_CTRL_X08) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-15](@ref SwR-15), [SwR-16](@ref SwR-16) | [getAEBState()](@ref getAEBState) | AEB system in STANDBY state |
 * | \anchor TC_AEB_CTRL_X09 **TC_AEB_CTRL_X09** | [test_TC_AEB_CTRL_X09()](@ref test_TC_AEB_CTRL_X09) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-15](@ref SwR-15), [SwR-16](@ref SwR-16) | [getAEBState()](@ref getAEBState) | AEB system in STANDBY state (low speed) |
 * | \anchor TC_AEB_CTRL_X10 **TC_AEB_CTRL_X10** | [test_TC_AEB_CTRL_X10()](@ref test_TC_AEB_CTRL_X10) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-15](@ref SwR-15), [SwR-16](@ref SwR-16) | [getAEBState()](@ref getAEBState) | AEB system in STANDBY state (high speed) |
 * | \anchor TC_AEB_CTRL_016 **TC_AEB_CTRL_016** | [test_TC_AEB_CTRL_016()](@ref test_TC_AEB_CTRL_016) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-15](@ref SwR-15), [SwR-16](@ref SwR-16) | [getAEBState()](@ref getAEBState) | AEB system in BRAKE state (low TTC) |
 * | \anchor TC_AEB_CTRL_017 **TC_AEB_CTRL_017** | [test_TC_AEB_CTRL_017()](@ref test_TC_AEB_CTRL_017) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-15](@ref SwR-15), [SwR-16](@ref SwR-16) | [getAEBState()](@ref getAEBState) | AEB system in ALARM state (TTC in alarm range) |
 * | \anchor TC_AEB_CTRL_018 **TC_AEB_CTRL_018** | [test_TC_AEB_CTRL_018()](@ref test_TC_AEB_CTRL_018) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-15](@ref SwR-15), [SwR-16](@ref SwR-16) | [getAEBState()](@ref getAEBState) | AEB system in ACTIVE state (TTC above alarm threshold) |
 * | \anchor TC_AEB_CTRL_019 **TC_AEB_CTRL_019** | [test_TC_AEB_CTRL_019()](@ref test_TC_AEB_CTRL_019) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-15](@ref SwR-15), [SwR-16](@ref SwR-16) | [getAEBState()](@ref getAEBState) | AEB system in ACTIVE state (brake pedal pressed) |
 * | \anchor TC_AEB_CTRL_020 **TC_AEB_CTRL_020** | [test_TC_AEB_CTRL_020()](@ref test_TC_AEB_CTRL_020) | [SwR-2](@ref SwR-2), [SwR-3](@ref SwR-3), [SwR-6](@ref SwR-6), [SwR-7](@ref SwR-7), [SwR-8](@ref SwR-8), [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11), [SwR-12](@ref SwR-12), [SwR-15](@ref SwR-15), [SwR-16](@ref SwR-16) | [getAEBState()](@ref getAEBState) | AEB system in ACTIVE state (accelerator pedal pressed) |
 * | \anchor TC_AEB_CTRL_021 **TC_AEB_CTRL_021** | [test_TC_AEB_CTRL_021()](@ref test_TC_AEB_CTRL_021) | [SwR-9](@ref SwR-9) | [translateAndCallCanMsg()](@ref translateAndCallCanMsg) | Pedal states updated (accelerator ON, brake OFF) |
 * | \anchor TC_AEB_CTRL_X11 **TC_AEB_CTRL_X11** | [test_TC_AEB_CTRL_X11()](@ref test_TC_AEB_CTRL_X11) | [SwR-9](@ref SwR-9) | [translateAndCallCanMsg()](@ref translateAndCallCanMsg) | Pedal states updated (accelerator OFF, brake ON) |
 * | \anchor TC_AEB_CTRL_022 **TC_AEB_CTRL_022** | [test_TC_AEB_CTRL_022()](@ref test_TC_AEB_CTRL_022) | [SwR-9](@ref SwR-9) | [translateAndCallCanMsg()](@ref translateAndCallCanMsg) | Speed state updated to 100 km/h |
 * | \anchor TC_AEB_CTRL_023 **TC_AEB_CTRL_023** | [test_TC_AEB_CTRL_023()](@ref test_TC_AEB_CTRL_023) | [SwR-9](@ref SwR-9) | [translateAndCallCanMsg()](@ref translateAndCallCanMsg) | Obstacle detected, Distance = 100 meters |
 * | \anchor TC_AEB_CTRL_024 **TC_AEB_CTRL_024** | [test_TC_AEB_CTRL_024()](@ref test_TC_AEB_CTRL_024) | [SwR-9](@ref SwR-9) | [translateAndCallCanMsg()](@ref translateAndCallCanMsg) | AEB system state updated (AEB system ON) |
 * | \anchor TC_AEB_CTRL_X12 **TC_AEB_CTRL_X12** | [test_TC_AEB_CTRL_X12()](@ref test_TC_AEB_CTRL_X12) | [SwR-9](@ref SwR-9) | [translateAndCallCanMsg()](@ref translateAndCallCanMsg) | Handle unknown CAN identifier (print message) |
 * | \anchor TC_AEB_CTRL_X13 **TC_AEB_CTRL_X13** | [test_TC_AEB_CTRL_X13()](@ref test_TC_AEB_CTRL_X13) | [SwR-9](@ref SwR-9) | [translateAndCallCanMsg()](@ref translateAndCallCanMsg) | Reverse flag enabled based on speed message |
 * | \anchor TC_AEB_CTRL_X14 **TC_AEB_CTRL_X14** | [test_TC_AEB_CTRL_X14()](@ref test_TC_AEB_CTRL_X14) | [SwR-9](@ref SwR-9) | [translateAndCallCanMsg()](@ref translateAndCallCanMsg) | Handle clear speed data command (reset speed and reverse flag) |
 * | \anchor TC_AEB_CTRL_X15 **TC_AEB_CTRL_X15** | [test_TC_AEB_CTRL_X15()](@ref test_TC_AEB_CTRL_X15) | [SwR-9](@ref SwR-9) | [translateAndCallCanMsg()](@ref translateAndCallCanMsg) | Handle invalid obstacle data (reset states) |
 * | \anchor TC_AEB_CTRL_X16 **TC_AEB_CTRL_X16** | [test_TC_AEB_CTRL_X16()](@ref test_TC_AEB_CTRL_X16) | Enhancements of verifications of CAN message's outputs | [updateCanMsgOutput()](@ref updateCanMsgOutput) | AEB system in BRAKE state (warning and braking systems activated) |
 * | \anchor TC_AEB_CTRL_X17 **TC_AEB_CTRL_X17** | [test_TC_AEB_CTRL_X17()](@ref test_TC_AEB_CTRL_X17) | Enhancements of verifications of CAN message's outputs | [updateCanMsgOutput()](@ref updateCanMsgOutput) | AEB system in ALARM state (warning system activated, braking system deactivated) |
 * | \anchor TC_AEB_CTRL_X18 **TC_AEB_CTRL_X18** | [test_TC_AEB_CTRL_X18()](@ref test_TC_AEB_CTRL_X18) | Enhancements of verifications of CAN message's outputs | [updateCanMsgOutput()](@ref updateCanMsgOutput) | AEB system in ACTIVE state (warning and braking systems deactivated) |
 * | \anchor TC_AEB_CTRL_X19 **TC_AEB_CTRL_X19** | [test_TC_AEB_CTRL_X19()](@ref test_TC_AEB_CTRL_X19) | Enhancements of verifications of CAN message's outputs | [updateCanMsgOutput()](@ref updateCanMsgOutput) | AEB system in STANDBY state (warning and braking systems deactivated) |
 * | \anchor TC_AEB_CTRL_X20 **TC_AEB_CTRL_X20** | [test_TC_AEB_CTRL_X20()](@ref test_TC_AEB_CTRL_X20) | Enhancements of verifications of CAN message's outputs | [updateCanMsgOutput()](@ref updateCanMsgOutput) | AEB system in invalid state (default values for CAN message) |
 * | \anchor TC_AEB_CTRL_X21 **TC_AEB_CTRL_X21** | [test_TC_AEB_CTRL_X21()](@ref test_TC_AEB_CTRL_X21) | Enhancements for expand MC/DC coverage | [updateInternalPedalsState()](@ref updateInternalPedalsState) | Valid and invalid pedal states handling (internal state update) |
 * | \anchor TC_AEB_CTRL_X22 **TC_AEB_CTRL_X22** | [test_TC_AEB_CTRL_X22()](@ref test_TC_AEB_CTRL_X22) | Enhancements for expand MC/DC coverage | [updateInternalObstacleState()](@ref updateInternalObstacleState) | Handle obstacle detection with specific data values |
 * | \anchor TC_AEB_CTRL_X23 **TC_AEB_CTRL_X23** | [test_TC_AEB_CTRL_X23()](@ref test_TC_AEB_CTRL_X23) | Enhancements for expand MC/DC coverage | [updateInternalObstacleState()](@ref updateInternalObstacleState) | Handle obstacle detection with specific data values |
 * | \anchor TC_AEB_CTRL_X24 **TC_AEB_CTRL_X24** | [test_TC_AEB_CTRL_X24()](@ref test_TC_AEB_CTRL_X24) | Enhancements for test the refactored acceleration functions | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Clear acceleration data in the CAN message |
 * | \anchor TC_AEB_CTRL_X25 **TC_AEB_CTRL_X25** | [test_TC_AEB_CTRL_X25()](@ref test_TC_AEB_CTRL_X25) | Enhancements for test the refactored acceleration functions | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Ignore acceleration update when CAN data indicates "ignore" (0xFF, 0xFF) |
 * | \anchor TC_AEB_CTRL_X26 **TC_AEB_CTRL_X26** | [test_TC_AEB_CTRL_X26()](@ref test_TC_AEB_CTRL_X26) | Enhancements for test the refactored acceleration functions | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Cap acceleration at 12.5 m/s² (positive) when exceeding the limit |
 * | \anchor TC_AEB_CTRL_X27 **TC_AEB_CTRL_X27** | [test_TC_AEB_CTRL_X27()](@ref test_TC_AEB_CTRL_X27) | Enhancements for test the refactored acceleration functions | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Cap deceleration at -12.5 m/s² (negative) when exceeding the limit |
 * | \anchor TC_AEB_CTRL_X28 **TC_AEB_CTRL_X28** | [test_TC_AEB_CTRL_X28()](@ref test_TC_AEB_CTRL_X28) | Enhancements for test the refactored acceleration functions | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Cap acceleration at 12.5 m/s² when exceeding the maximum limit |
 * | \anchor TC_AEB_CTRL_X29 **TC_AEB_CTRL_X29** | [test_TC_AEB_CTRL_X29()](@ref test_TC_AEB_CTRL_X29) | Enhancements for test the refactored acceleration functions | [updateInternalSpeedState()](@ref updateInternalSpeedState) | Cap deceleration at -12.5 m/s² when below the minimum limit (reverse direction) |
 * | \anchor TC_FILE_READER_001 **TC_FILE_READER_001** | [test_open_file_fopen_fail_should_exit()](@ref test_open_file_fopen_fail_should_exit) | [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [open_file()](@ref open_file) | wrap_perror_called = true, wrap_exit_called = true and wrap_exit_status = EXIT_FAILURE |
 * | \anchor TC_FILE_READER_002 **TC_FILE_READER_002** | [test_open_file_not_null_and_skip_header](@ref test_open_file_not_null_and_skip_header) | [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [open_file()](@ref open_file) | test_filename != NULL and buffer = "60 1 108 0 1 1 0 0\n" |
 * | \anchor TC_FILE_READER_003 **TC_FILE_READER_003** | [test_read_sensor_data_valid_data](@ref test_read_sensor_data_valid_data) | [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [read_sensor_data()](@ref read_sensor_data) | test_sensor_data = {.obstacle_distance = 60.0, .has_obstacle = 1, .relative_velocity = 108.0, .brake_pedal = 0, .accelerator_pedal = 1, .on_off_aeb_system = 1, .reverseEnabled = 0, .relative_acceleration = 0.0} |
 * | \anchor TC_FILE_READER_004 **TC_FILE_READER_004** | [test_read_sensor_data_eof](@ref test_read_sensor_data_eof) | [SwR-9](@ref SwR-9), [SwR-11](@ref SwR-11) | [read_sensor_data()](@ref read_sensor_data) | 0 |
 * | \anchor TC_SENSORS_001 **TC_SENSORS_001** | [test_conv2CANCarClusterData_AEB_on](@ref test_conv2CANCarClusterData_AEB_on) | [SwR-9](@ref SwR-9), [SwR-10](@ref SwR-10), [SwR-11](@ref SwR-11) | [conv2CANCarClusterData()](@ref conv2CANCarClusterData) | The can_msg result identifier should be ID_CAR_C and the dataFrame[0] = 0x01 |
 * | \anchor TC_SENSORS_002 **TC_SENSORS_002** | [test_conv2CANCarClusterData_AEB_off](@ref test_conv2CANCarClusterData_AEB_off) | [SwR-9](@ref SwR-9), [SwR-10](@ref SwR-10), [SwR-11](@ref SwR-11) | [conv2CANCarClusterData()](@ref conv2CANCarClusterData) | The can_msg result identifier should be ID_CAR_C and the dataFrame[0] = 0x00 |
 * | \anchor TC_SENSORS_003 **TC_SENSORS_003** | [test_conv2CANVelocityData_Forward](@ref test_conv2CANVelocityData_Forward) | [SwR-9](@ref SwR-9), [SwR-10](@ref SwR-10), [SwR-11](@ref SwR-11) | [conv2CANVelocityData()](@ref conv2CANVelocityData) | The can_msg result identifier should be ID_SPEED_S and the dataFrame = {0x00, 0x6C, 0x01, 0x77, 0x54, 0x00} |
 * | \anchor TC_SENSORS_004 **TC_SENSORS_004** | [test_conv2CANVelocityData_Reverse](@ref test_conv2CANVelocityData_Reverse) | [SwR-9](@ref SwR-9), [SwR-10](@ref SwR-10), [SwR-11](@ref SwR-11) | [conv2CANVelocityData()](@ref conv2CANVelocityData) | The can_msg result identifier should be ID_SPEED_S and the dataFrame = {0x00, 0x6C, 0x00, 0x27, 0x35, 0x01} |
 * | \anchor TC_SENSORS_005 **TC_SENSORS_005** | [test_conv2CANObstacleData_Present](@ref test_conv2CANObstacleData_Present) | [SwR-9](@ref SwR-9), [SwR-10](@ref SwR-10), [SwR-11](@ref SwR-11) | [conv2CANObstacleData()](@ref conv2CANObstacleData) | The can_msg result identifier should be ID_OBSTACLE_S and the dataFrame = {0xB0, 0x04, 0x01} |
 * | \anchor TC_SENSORS_006 **TC_SENSORS_006** | [test_conv2CANObstacleData_NotPresent](@ref test_conv2CANObstacleData_NotPresent) | [SwR-9](@ref SwR-9), [SwR-10](@ref SwR-10), [SwR-11](@ref SwR-11) | [conv2CANObstacleData()](@ref conv2CANObstacleData) | The can_msg result identifier should be ID_OBSTACLE_S and the dataFrame = {0xB0, 0x04, 0x00} |
 * | \anchor TC_SENSORS_007 **TC_SENSORS_007** | [test_conv2CANPedalsData_BrakeAndAccelerator](@ref test_conv2CANPedalsData_BrakeAndAccelerator) | [SwR-9](@ref SwR-9), [SwR-10](@ref SwR-10), [SwR-11](@ref SwR-11) | [conv2CANPedalsData()](@ref conv2CANPedalsData) | The can_msg result identifier should be ID_PEDALS and the dataFrame = {0x01, 0x01} |
 * | \anchor TC_SENSORS_008 **TC_SENSORS_008** | [test_conv2CANPedalsData_BrakeOnly](@ref test_conv2CANPedalsData_BrakeOnly) | [SwR-9](@ref SwR-9), [SwR-10](@ref SwR-10), [SwR-11](@ref SwR-11) | [conv2CANPedalsData()](@ref conv2CANPedalsData) | The can_msg result identifier should be ID_PEDALS and the dataFrame = {0x00, 0x01} |
 * | \anchor TC_SENSORS_009 **TC_SENSORS_009** | [test_conv2CANPedalsData_AcceleratorOnly](@ref test_conv2CANPedalsData_AcceleratorOnly) | [SwR-9](@ref SwR-9), [SwR-10](@ref SwR-10), [SwR-11](@ref SwR-11) | [conv2CANPedalsData()](@ref conv2CANPedalsData) | The can_msg result identifier should be ID_PEDALS and the dataFrame = {0x01, 0x00} |
 * | \anchor TC_SENSORS_010 **TC_SENSORS_010** | [test_conv2CANPedalsData_NoneActive](@ref test_conv2CANPedalsData_NoneActive) | [SwR-9](@ref SwR-9), [SwR-10](@ref SwR-10), [SwR-11](@ref SwR-11) | [conv2CANPedalsData()](@ref conv2CANPedalsData) | The can_msg result identifier should be ID_PEDALS and the dataFrame = {0x00, 0x00} |
 * | \anchor TC_MQ_UTILS_001 **TC_MQ_UTILS_001** | [test_get_mq_attr()](@ref test_get_mq_attr) | [SwR-11](@ref SwR-11) | [get_mq_attr()](@ref get_mq_attr) | struct mq_attr = { .mq_flags = O_NONBLOCK, .mq_curmsgs = 0, .mq_maxmsg = 10, .mq_msgsize = 12 } |
 * | \anchor TC_MQ_UTILS_002 **TC_MQ_UTILS_002** | [test_create_and_close_mq()](@ref test_create_and_close_mq) | [SwR-11](@ref SwR-11) | [create_mq()](@ref create_mq), [close_mq()](@ref close_mq) | Message queue must exist in /dev/mqueue after creation and must not exist after closing |
 * | \anchor TC_MQ_UTILS_003 **TC_MQ_UTILS_003** | [test_create_mq_fail()](@ref test_create_mq_fail) | [SwR-11](@ref SwR-11) | [close_mq()](@ref close_mq) | Return (mqd_t)-1 when mqueue creation fails |
 * | \anchor TC_MQ_UTILS_004 **TC_MQ_UTILS_004** | [test_close_unopened_mq_fail()](@ref test_close_unopened_mq_fail) | [SwR-11](@ref SwR-11) | [close_mq()](@ref close_mq) | Call perror when close_mq() fails |
 * | \anchor TC_MQ_UTILS_005 **TC_MQ_UTILS_005** | [test_close_mq_fail_unlink()](@ref test_close_mq_fail_unlink) | [SwR-11](@ref SwR-11) | [close_mq()](@ref close_mq) | Call perror when close_mq()'s unlinking fails |
 * | \anchor TC_MQ_UTILS_006 **TC_MQ_UTILS_006** | [test_open_mq()](@ref test_open_mq) | [SwR-11](@ref SwR-11) | [open_mq()](@ref open_mq) | Return mq descriptor different from -1 when opening an existing message queue |
 * | \anchor TC_MQ_UTILS_007 **TC_MQ_UTILS_007** | [test_open_mq_fail()](@ref test_open_mq_fail) | [SwR-11](@ref SwR-11) | [open_mq()](@ref open_mq) | Return (mqd_t)-1 and call perror when mq_open() fails |
 * | \anchor TC_MQ_UTILS_008 **TC_MQ_UTILS_008** | [test_read_mq_empty_queue()](@ref test_read_mq_empty_queue) | [SwR-11](@ref SwR-11) | [read_mq()](@ref read_mq) | Return -1 when reading empty message queue |
 * | \anchor TC_MQ_UTILS_009 **TC_MQ_UTILS_009** | [test_write_mq_full_queue()](@ref test_write_mq_full_queue) | [SwR-11](@ref SwR-11) | [write_mq()](@ref write_mq) | Return -1 when writing to full message queue |
 * | \anchor TC_MQ_UTILS_010 **TC_MQ_UTILS_010** | [test_read_and_write_mq_empty_can_msg()](@ref test_read_and_write_mq_empty_can_msg) | [SwR-5](@ref SwR-5), [SwR-11](@ref SwR-11) | [read_mq()](@ref read_mq), [write_mq()](@ref write_mq) | Tests reading and writing empty message to message queue |
 * | \anchor TC_MQ_UTILS_011 **TC_MQ_UTILS_011** | [test_read_and_write_mq_valid_can_msg()](@ref test_close_unopened_mq_fail) | [SwR-11](@ref SwR-11) | [read_mq()](@ref read_mq), [write_mq()](@ref write_mq) | Tests reading and writing valid can message to message queue |
 */
